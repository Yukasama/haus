@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package haus #DDDDDD {
  package entity #FFFFFF {
    class Haus <<entity>>
  }

  package service #FFFFFF {
    class HausWriteService << control >>
  }

  class "type HausDTO = Omit<Haus, 'personen' | 'aktualisiert' | 'erzeugt'" as HausDTO
  hide HausDTO circle

    interface IdInput {
        id: number
    }

  class HausMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() HausDTO: HausDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() hausDTO: hausDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  HausMutationResolver o-down-> "1" HausWriteService : service

  HausMutationResolver ..> Haus
  HausMutationResolver ..> HausDTO
  HausMutationResolver ..> IdInput
  HausDTO .up.> Haus
  HausMutationResolver ..> Promise
  HausMutationResolver ..> Resolver

  HausMutationResolver .up.> AuthGuard
  HausMutationResolver .up.> Roles

  HausDTO .[hidden].> Promise
  HausDTO .[hidden].> Resolver
}

hide empty members

@enduml
