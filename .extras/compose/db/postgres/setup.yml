# (1) in extras\compose\compose.yml
#        auskommentieren:
#           Zeile mit "command:" und nachfolgende Listenelemente mit f√ºhrendem "-"
#              damit der PostgreSQL-Server ohne TLS gestartet wird
#           bei den Listenelementen unterhalb von "volumes:" die Zeilen mit "read_only:" bei key.pem und certificate.crt
#              damit die Zugriffsrechte fuer den privaten Schluessel und das Zertifikat nachfolgend gesetzt werden koennen
#           Zeile mit "user:"
#              damit der PostgreSQL-Server implizit mit dem Linux-User "root" gestartet wird
#        Kommentar entfernen:
#           Zeile mit "#cap_add: [...]"
# (2) PowerShell:
#     cd .extras\compose\db\postgres
#     docker compose up db
# (3) 2. PowerShell:
#     cd .extras\compose\db\postgres
#     docker compose exec db bash
#        chown postgres:postgres /var/lib/postgresql/tablespace
#        chown postgres:postgres /var/lib/postgresql/tablespace/haus
#        chown postgres:postgres /var/lib/postgresql/key.pem
#        chown postgres:postgres /var/lib/postgresql/certificate.crt
#        chmod 400 /var/lib/postgresql/key.pem
#        chmod 400 /var/lib/postgresql/certificate.crt
#        exit
#     docker compose down
# (3) in compose.yml die obigen Kommentare wieder entfernen, d.h.
#        PostgreSQL-Server mit TLS starten
#        key.pem und certificate.crt als readonly
#        den Linux-User "postgres" wieder aktivieren
#     in compose.yml die Zeile "cap_add: [...]" wieder auskommentieren
# (4) 1. PowerShell:
#     docker compose up db
# (5) 2. PowerShell:
#     docker compose exec db bash
#        psql #dbname=postgres #username=postgres #file=/sql/create-db-haus.sql
#        psql #dbname=haus #username=haus #file=/sql/create-schema-haus.sql
#        exit
#      docker compose down

services:
  db:
    # https://github.com/docker-library/postgres/blob/master/16/bookworm/Dockerfile
    image: postgres:16.2-bookworm
    ports:
      - published: 5432
        target: 5432
    restart: unless-stopped
    # https://dev.to/danvixent/how-to-setup-postgresql-with-ssl-inside-a-docker-container-5f3
    # https://gist.github.com/mrw34/c97bb03ea1054afb551886ffc8b63c3b
    # https://stackoverflow.com/questions/55072221/deploying-postgresql-docker-with-ssl-certificate-and-key-with-volumes
    # command:
    #   - 'postgres'
    #   - '-c'
    #   - 'ssl=on'
    #   - '-c'
    #   - 'ssl_cert_file=/var/lib/postgresql/certificate.crt'
    #   - '-c'
    #   - 'ssl_key_file=/var/lib/postgresql/key.pem'
    volumes:
      - type: bind
        source: C:/Zimmermann/volumes/postgres/data
        target: /var/lib/postgresql/data
      - type: bind
        source: C:/Zimmermann/volumes/postgres/postgresql.conf
        target: /etc/postgresql/postgresql.conf
        read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tablespace
        target: /var/lib/postgresql/tablespace
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tls/key.pem
        target: /var/lib/postgresql/key.pem
        # read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tls/certificate.crt
        target: /var/lib/postgresql/certificate.crt
        # read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/run
        # .s.PGSQL.5432.lock
        target: /var/run/postgresql
      - type: bind
        source: C:/Zimmermann/volumes/postgres/csv/haus
        target: /csv
        read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/sql
        target: /sql
        read_only: true
    env_file: .env
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    # https://docs.docker.com/compose/use-secrets
    secrets: [db-password]
    # user: 'postgres:postgres'
    security_opt:
      - label:user:postgres
      - no-new-privileges:true
    hostname: postgres
    container_name: postgres
    healthcheck:
      test: [CMD, pg_isready, --dbname=postgres, --username=postgres]
      interval: 5s
      timeout: 2s
      start_period: 5s
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#cap_add-cap_drop
    cap_drop: [ALL]
    # https://man7.org/linux/man-pages/man7/capabilities.7.html
    cap_add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE, NET_BIND_SERVICE, CAP_FOWNER]
    # https://docs.docker.com/compose/compose-file/deploy
    deploy:
      # https://docs.docker.com/compose/compose-file/deploy/#resources
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 512M

  # ----------------------------------------------------------------------------
  # p g a d m i n
  # ----------------------------------------------------------------------------
  # http://localhost:8888 mit Emailadresse "pgadmin@acme.com" und Passwort "p"
  pgadmin:
    image: dpage/pgadmin4:8.4
    ports:
      - published: 8888
        target: 80
    volumes:
      - type: bind
        source: C:/Zimmermann/volumes/postgres/pgadmin
        # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
        # enthaelt u.a. pgadmin4.db als SQLite-DB mit z.B. der Tabelle "user"
        target: /var/lib/pgadmin
      - type: bind
        source: C:/Zimmermann/volumes/postgres/pgadmin4
        target: /var/lib/pgadmin4
    env_file: pgadmin.env
    user: 'pgadmin:5050'
    hostname: pgadmin
    container_name: pgadmin
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#cap_add-cap_drop
    cap_drop: [ALL]
    # https://man7.org/linux/man-pages/man7/capabilities.7.html
    # setgid
    # find '/var/lib/...'
    # find '/var/spool/...'
    # /venv/bin/python3
    # /venv/bin/gunicorn
    cap_add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE, NET_BIND_SERVICE]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
secrets:
  db-password:
    file: db_password.txt
